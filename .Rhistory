gg = (temp - t0) / cc
dc  = -((use - lse)/2)*(temp - t0)*(sech(gg)^2)/(cc^2)
dt0 = -((use - lse)/2)*(sech(gg)^2)/cc
V = cbind(dc, dt0)
}
if(mod=="abur"){
kk = coef(res)[1]
t0 = coef(res)[2]
mm = coef(res)[3]
lse = coef(res)[4]
use = coef(res)[5]
tt0 = temp - t0
dk = mm*(tt0)*(upper_shelf - lower_shelf)*exp(-kk*tt0)*
(1 + exp(-kk*tt0))^(-mm-1)
dt0 = -kk*mm*(upper_shelf - lower_shelf)*exp(-kk*tt0)*
(1 + exp(-kk*tt0))^(-mm-1)
dm = ((upper_shelf - lower_shelf) / ((1 + exp(-kk*tt0))^mm)) *
log(1 + exp(-kk*tt0))
dlse = 1-1/(exp(-kk*(temp-t0))+1)^mm
duse = 1/(exp(-kk*(temp-t0))+1)^mm
V = cbind(dk,dt0,dm,dlse,duse)
}
if(mod=="aburuf"){
kk = coef(res)[1]
t0 = coef(res)[2]
mm = coef(res)[3]
lse = coef(res)[4]
use = upper_shelf
tt0 = temp - t0
dk = mm*(tt0)*(use - lse)*exp(-kk*tt0)*(1 + exp(-kk*tt0))^(-mm-1)
dt0 = -kk*mm*(use - lse)*exp(-kk*tt0)*(1 + exp(-kk*tt0))^(-mm-1)
dm = ((use - lse) / ((1 + exp(-kk*tt0))^mm))*log(1 + exp(-kk*tt0))
dlse = 1-1/(exp(-kk*(temp-t0))+1)^mm
V = cbind(dk,dt0,dm,dlse)
}
if(mod=="aburf"){
kk = coef(res)[1]
t0 = coef(res)[2]
mm = coef(res)[3]
lse = lower_shelf
use = upper_shelf
tt0 = temp - t0
dk = mm*(tt0)*(use - lse)*exp(-kk*tt0)*(1 + exp(-kk*tt0))^(-mm-1)
dt0 = -kk*mm*(use - lse)*exp(-kk*tt0)*(1 + exp(-kk*tt0))^(-mm-1)
dm = ((use - lse) / ((1 + exp(-kk*tt0))^mm))*log(1 + exp(-kk*tt0))
V = cbind(dk,dt0,dm)
}
if(mod=="koh"){
cc = coef(res)[1]
t0 = coef(res)[2]
lse = coef(res)[3]
use = coef(res)[4]
dc = -((temp-t0)*(use-lse))/(2*((pi^2*(temp-t0)^2)/(4*cc^2)+1)*cc^2)
dt0 = -(use-lse)/(2*cc*((pi^2*(temp-t0)^2)/(4*cc^2)+1))
dlse = 1/2 - atan((pi*(temp-t0))/(2*cc))/pi
duse = atan((pi*(temp-t0))/(2*cc))/pi + 1/2
V = cbind(dc,dt0,dlse,duse)
}
if(mod=="kohuf"){
cc = coef(res)[1]
t0 = coef(res)[2]
lse = coef(res)[3]
use = upper_shelf
dc = -((temp-t0)*(use-lse))/(2*((pi^2*(temp-t0)^2)/(4*cc^2)+1)*cc^2)
dt0 = -(use-lse)/(2*cc*((pi^2*(temp-t0)^2)/(4*cc^2)+1))
dlse = 1/2 - atan((pi*(temp-t0))/(2*cc))/pi
V = cbind(dc,dt0,dlse)
}
if(mod=="kohf"){
cc = coef(res)[1]
t0 = coef(res)[2]
lse = lower_shelf
use = upper_shelf
dc = -((temp-t0)*(use-lse))/(2*((pi^2*(temp-t0)^2)/(4*cc^2)+1)*cc^2)
dt0 = -(use-lse)/(2*cc*((pi^2*(temp-t0)^2)/(4*cc^2)+1))
V = cbind(dc,dt0)
}
if(mod=="akoh"){
cc = coef(res)[1]
t0 = coef(res)[2]
pp = coef(res)[3]
lse = coef(res)[4]
use = coef(res)[5]
diff = use - lse
dc = rep(NA,nn)
dt0 = rep(NA,nn)
dp = rep(NA,nn)
dlse = rep(NA,nn)
duse = rep(NA,nn)
for(i in 1:nn){
if(temp[i] <= t0){
ee = exp((pp+1)*(temp[i]-t0)/(2*cc))
dc[i] = ((t0-temp[i])*diff/(2*cc^2))*ee
dt0[i] = (-diff/(2*cc))*ee
dp[i] = (-diff/(2*cc*(pp+1)^2))*(pp*(t0-temp[i])+t0-temp[i]+2*cc)*ee
dlse[i] = 1-exp(((pp+1)*(temp[i]-t0))/(2*cc))/(pp+1)
duse[i] = exp(((pp+1)*(temp[i]-t0))/(2*cc))/(pp+1)
} else {
ff = exp(-(pp+1)*(temp[i]-t0)/(2*pp*cc))
dc[i] = ((t0-temp[i])*diff/(2*cc^2))*ff
dt0[i] = (-diff/(2*cc))*ff
dp[i] = (diff/(2*pp*cc*(1+pp)^2))*(pp*(t0-temp[i]-2*cc) + t0 - temp[i])* ff
dlse[i] = (pp*exp(-((pp+1)*(temp[i]-t0))/(2*cc*pp)))/(pp+1)
duse[i] = 1-(pp*exp(-((pp+1)*(temp[i]-t0))/(2*cc*pp)))/(pp+1)
}
}
V = cbind(dc,dt0,dp,dlse,duse)
}
if(mod=="akohuf"){
cc = coef(res)[1]
t0 = coef(res)[2]
pp = coef(res)[3]
lse = coef(res)[4]
use = upper_shelf
diff = use - lse
dc = rep(NA,nn)
dt0 = rep(NA,nn)
dp = rep(NA,nn)
dlse = rep(NA,nn)
for(i in 1:nn){
if(temp[i] <= t0){
ee = exp((pp+1)*(temp[i]-t0)/(2*cc))
dc[i] = ((t0-temp[i])*diff/(2*cc^2))*ee
dt0[i] = (-diff/(2*cc))*ee
dp[i] = (-diff/(2*cc*(pp+1)^2))*(pp*(t0-temp[i])+t0-temp[i]+2*cc)*ee
dlse[i] = 1-exp(((pp+1)*(temp[i]-t0))/(2*cc))/(pp+1)
} else {
ff = exp(-(pp+1)*(temp[i]-t0)/(2*pp*cc))
dc[i] = ((t0-temp[i])*diff/(2*cc^2))*ff
dt0[i] = (-diff/(2*cc))*ff
dp[i] = (diff/(2*pp*cc*(1+pp)^2))*(pp*(t0-temp[i]-2*cc) + t0 - temp[i])* ff
dlse[i] = (pp*exp(-((pp+1)*(temp[i]-t0))/(2*cc*pp)))/(pp+1)
}
}
V = cbind(dc,dt0,dp,dlse)
}
if(mod=="akohf"){
cc = coef(res)[1]
t0 = coef(res)[2]
pp = coef(res)[3]
lse = lower_shelf
use = upper_shelf
diff = use - lse
dc = rep(NA,nn)
dt0 = rep(NA,nn)
dp = rep(NA,nn)
for(i in 1:nn){
if(temp[i] <= t0){
ee = exp((pp+1)*(temp[i]-t0)/(2*cc))
dc[i] = ((t0-temp[i])*diff/(2*cc^2))*ee
dt0[i] = (-diff/(2*cc))*ee
dp[i] = (-diff/(2*cc*(pp+1)^2))*(pp*(t0-temp[i])+t0-temp[i]+2*cc)*ee
} else {
ff = exp(-(pp+1)*(temp[i]-t0)/(2*pp*cc))
dc[i] = ((t0-temp[i])*diff/(2*cc^2))*ff
dt0[i] = (-diff/(2*cc))*ff
dp[i] = (diff/(2*pp*cc*(1+pp)^2))*(pp*(t0-temp[i]-2*cc) + t0 - temp[i])* ff
}
}
V = cbind(dc,dt0,dp)
}
H = V %*% solve(t(V)%*% V) %*% t(V)
return(H)
} ### end of hat
##########################
# plot all curves together
# (models with valid results only)
plot.mods(yy,temp,mod2,results,newt$temp,dfmod,colorz,lower_shelf,upper_shelf)
#########################################################################
# generate plots, residual plots, bootstrap confidence/prediction bounds,
# and bootstrap standard errors for models with valid results
bout = list()
tpout = list()
j=1
k = mstats2$modid[j]
res = results[[k]]
i = mod2[j]
i.res = paste(i,".res",sep="")
fun = get(i)
fun.res = get(i.res)
mstats
t
ID
##############################
# fit and plot selected models
fitres = fits(mod,lower_shelf,upper_shelf,yy,temp,fit)
start
mod
lower_shelf
yy
temp
fit
##############################
# fit and plot selected models
fitres = fits(mod,lower_shelf,upper_shelf,yy,temp,fit)
start = list()
start$ht    = c(c=c_prov, t0=t0_prov, lse=lower_shelf, use=upper_shelf)
start$htf   = c(c=c_prov, t0=t0_prov)
start$htuf  = c(c=c_prov, t0=t0_prov, lse=lower_shelf)
start$aht   = c(c=c_prov, t0=t0_prov, d=d_prov, lse=lower_shelf, use=upper_shelf)
start$ahtf  = c(c=c_prov, t0=t0_prov, d=d_prov)
start$ahtuf = c(c=c_prov, t0=t0_prov, d=d_prov, lse=lower_shelf)
start$abur   = c(k=k_prov, t0=t0_prov, m=m_prov, lse=lower_shelf, use=upper_shelf)
start$aburf  = c(k=k_prov, t0=t0_prov, m=m_prov)
start$aburuf = c(k=k_prov, t0=t0_prov, m=m_prov, lse=lower_shelf)
start$koh   = c(c=ck_prov, DBTT=t0_prov, lse=lower_shelf, use=upper_shelf)
start$kohf  = c(c=ck_prov, DBTT=t0_prov)
start$kohuf = c(c=ck_prov, DBTT=t0_prov, lse=lower_shelf)
start$akoh   = c(c=ck_prov, t0=dbtt, p=p_prov, lse=lower_shelf, use=upper_shelf )
start$akohf  = c(c=ck_prov, t0=dbtt, p=p_prov)
start$akohuf = c(c=ck_prov, t0=dbtt, p=p_prov, lse=lower_shelf)
##############################
# fit and plot selected models
fitres = fits(mod,start,lower_shelf,upper_shelf,yy,temp,fit)
mstats = fitres[[2]]
results = fitres[[1]]
names(results) = mod
results
################################
# keep models with valid results
nmod = length(mod)
keepid = ifelse(mstats$conv %in% c(1,2,3), 1, 0)
# save fit message for printing
mod.not = data.frame(mstats$mod, keepid, mstats$mess)
mod.not = mod.not[mod.not$keepid==0, c(1,3)]
names(mod.not) = c("Model","Convergence Message")
mod.not
# save model stats for models that converged
mstats2 = mstats[keepid==1, 1:5]
mod2 = as.character(mstats2$mod)
##########################
# plot all curves together
# (models with valid results only)
plot.mods(yy,temp,mod2,results,newt$temp,dfmod,colorz,lower_shelf,upper_shelf)
#########################################################################
# generate plots, residual plots, bootstrap confidence/prediction bounds,
# and bootstrap standard errors for models with valid results
bout = list()
tpout = list()
mstats
j
boot
k = mstats2$modid[j]
res = results[[k]]
i = mod2[j]
i.res = paste(i,".res",sep="")
fun = get(i)
fun.res = get(i.res)
print(c(i,j,k))
# generate single plot and residual plot
splot(yy,temp,i,res,t,fun,dfmod,lower_shelf,upper_shelf)
nlsres(yy,temp,i,res,fun,dfmod,lower_shelf,upper_shelf,fit)
# generate bootstrap uncertainties and prediction/confidence bounds
bsres = boot(mod2[j],yy,temp,t,fun,fun.res,res,fit,lower_shelf,
upper_shelf,uus,uls,nsim)
bsres
names(bsres)
dim(bsres)
class(bsres)
length(bsres)
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?renderUI
mstats
?checkboxGroupInput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
mod
myfun
other_vars$mod
model_name
shiny::runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
mod
other_vars$mod
other_vars$mod[1]
mstats
results
results$ht
results$ht[[1]]
other_Vars
other_Vars
other_vars
mod[i]
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
input$fits_to_show
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
other_vars$mod
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
shiny::runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?column
?selectInput
bsres
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
mstats
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?renderDataTable
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?renderTable
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?tableOutput
?column
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?renderDataTable
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?renderTable
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp()
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
?DT::renderDataTable
DT::renderDataTable()
DT::renderDataTable(data.frame())
DT::renderDataTable(data.frame(x=1:3))
DT::renderDataTable({data.frame(x=1:3)})
dataTableOutput
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
mstats
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
.1*24*30*12
.007*24*30
.0124*24*30
.0124*24*30*12
shiny::runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
?lm
runApp('CellCounting/AppV1')
beta = 2
x = seq(1,10,.5)
y = x*beta + rnorm(length(x))
res = summary(lm(y~x))
res
res$coefficients
lm(y~x)
res = lm(y~x)
conf.int(res,'x')
?confint
confint(res,'x')
beta = 2
res = rep(0,1000)
beta = 2
res = rep(0,1000)
for(i in 1:1000) {
x = seq(1,10)
y = x*beta + rnorm(length(x))
fit = lm(y~x)
cint = confint(fit,'x')
res[i] = cint[1] < 2 & 2 < cint[2]
}
mean(res)
beta = 2
res = rep(0,1000)
for(i in 1:1000) {
x = seq(1,100)
y = x*beta + rnorm(length(x))
fit = lm(y~x)
cint = confint(fit,'x')
res[i] = cint[1] < 2 & 2 < cint[2]
}
mean(res)
shiny::runApp('CellLineAuthentication/AppV1')
?stop
runApp('CellLineAuthentication/AppV1')
runApp('CellLineAuthentication/AppV1')
runApp('CellLineAuthentication/AppV1')
runApp('CellLineAuthentication/AppV1')
runApp('CellLineAuthentication/AppV1')
runApp('CellLineAuthentication/AppV1')
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}")
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",zmax=1)
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",zmin=0,zmax=1)
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",zmin=0,zmax=1,colorscale='Bluered')
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",zmin=0,zmax=1,colorscale='Earth')
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",zmin=0,zmax=1,colorscale='thermal')
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",zmin=0,zmax=1,colorscale='hot')
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",
zmin=0,
zmax=1,
colorscale='hot')
plot_ly(x=colnames(dmat),
y=colnames(dmat),
z=dmat,
type='heatmap',
hovertemplate = "(%{x}, %{y}) Distance: %{z}",
zmin=0,
zmax=1,
colorscale='Hot')
runApp('CellLineAuthentication/AppV1')
runApp('CellLineAuthentication/AppV1')
shiny::runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
rows_to_transform
rows_to_transform_nonzero
boot.metrics
metrics$metrics$Metric
which(rows_to_transform_nonzero)
metrics$metrics
log(.01)
?log
exp(log(5))
value
length(value)
length(rows_to_transform_nonzero)
value[23]
log(.11)
value[23]
log(.111228)
metrics$metrics$upper[23]
metrics$metrics$upper[23] %>% exp()
metrics$metrics$lower[23]
metrics$metrics$upper[23]
t_val
value
value[23]
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
boot.metrics[23,]
boot.metrics[rows_to_transform_nonzero,]
value
metrics$metrics$upper
metrics$metrics
metrics$metrics[91:96,]
se
se[91:96]
metrics$metrics
metrics$metrics
7.58*10**4
7.58*10**4 %>% log
7.58*10**4 %>% log()
runApp('CellCounting/AppV1')
boot.metrics[rows_to_transform_nonzero,]
metrics$metrics
boot.metrics[91:96,]
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
outdf
cms
this_data
colnames(this_data)
?lm
?summary.lm
runApp('CellCounting/AppV1')
mod
mod$coefficients
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
?DT::renderDataTable
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
?sidebarLayout
?sidebarPanel
sidebarPanel
runApp('CellCounting/AppV1')
?column
column
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
setwd("~/CellCounting/AppV1")
deployApp()
library(rsconnect)
deployApp()
