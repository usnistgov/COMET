dplyr::filter(Metric %in% c(Metrics()$metrics_to_plot))
Metrics()$metrics_to_plot
Metrics()$metrics %>%
as.data.frame() %>%
dplyr::select(counting_method, Metric, Value, lower, upper) %>%
dplyr::filter(Metric %in% c(Metrics()$perf_metrics)) %>%
dplyr::filter(grepl('smooth',Metric,ignore.case = TRUE))
Metrics()$perf_metrics
Metrics()$metrics
runApp('ByScientist/SumonaSarkar/AppV1')
Metrics()$metrics %>%
as.data.frame() %>%
dplyr::select(counting_method, Metric, Value, lower, upper) %>%
dplyr::filter(Metric %in% c(metrics_key_value(as.numeric(Metrics()$perf_metrics))))
metrics_key_value(as.numeric(Metrics()$perf_metrics))
Metrics()$metrics %>%
as.data.frame() %>%
dplyr::select(counting_method, Metric, Value, lower, upper)
runApp('ByScientist/SumonaSarkar/AppV1')
Metrics()$metrics %>%
as.data.frame() %>%
dplyr::select(counting_method, Metric, Value, lower, upper) %>%
dplyr::filter(Metric %in% c(metrics_key_value(as.numeric(Metrics()$perf_metrics))))
runApp('ByScientist/SumonaSarkar/AppV1')
runApp('ByScientist/SumonaSarkar/AppV1')
runApp('ByScientist/SumonaSarkar/AppV1')
runApp('ByScientist/SumonaSarkar/AppV1')
runApp('ByScientist/SumonaSarkar/AppV1')
runApp('ByScientist/SumonaSarkar/AppV1')
runApp('ByScientist/SumonaSarkar/AppV1')
runApp('ByScientist/SumonaSarkar/AppV1')
?rgeom
rgeom(1,.99)
rgeom(1,.01)
simulate_member = function(p1,p2,p3,q) {
enroll = rbinom(1,1,p1)
if(!enroll) {
return(0)
}
engage = rbinom(1,1,p2)
if(!engage) {
return(1)
}
n_client_calls = rgeom(1,p3+q)
client_succeeds = rbinom(1,1,p3/(1-p3-q))
if(!client_succeeds) {
return(2)
}
if(client_succeeds) {
return(3)
}
}
simulate_member(.1,.1,.05,.4)
simulate_member(.1,.1,.05,.4)
simulate_member(.1,.1,.05,.4)
simulate_member(.1,.1,.05,.4)
simulate_member = function(p1,p2,p3,q) {
enroll = rbinom(1,1,p1)
if(!enroll) {
return(0)
}
engage = rbinom(1,1,p2)
if(!engage) {
return(1)
}
n_client_calls = rgeom(1,p3+q)
client_succeeds = rbinom(1,1,p3/(1-p3-q))
if(!client_succeeds) {
return(2)
}
if(client_succeeds) {
return(3)
}
}
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
simulate_member(.15,.15,.1,.4)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
rbinom(1,1,.1)
simulate_member = function(p1,p2,p3,q) {
enroll = rbinom(1,1,p1)
if(!enroll) {
return(0)
}
engage = rbinom(1,1,p2)
if(!engage) {
return(1)
}
n_client_calls = rgeom(1,p3+q)
client_succeeds = rbinom(1,1,p3/(1-p3-q))
if(!client_succeeds) {
return(2)
}
if(client_succeeds) {
return(3)
}
}
res = rep(0,1000)
for(ii in 1:length(res)) {
res[ii] = simulate_member(.15,.15,.1,.4)
}
hist(Res)
table(res)
simulate_member = function(p1,p2,p3,q) {
enroll = rbinom(1,1,p1)
if(!enroll) {
return(0)
}
engage = rbinom(1,1,p2)
if(!engage) {
return(1)
}
n_client_calls = rgeom(1,p3+q)
client_succeeds = rbinom(1,1,p3/(1-p3-q))
if(!client_succeeds) {
return(2)
}
if(client_succeeds) {
return(3)
}
}
res = rep(0,1000)
for(ii in 1:length(res)) {
res[ii] = simulate_member(.2,.2,.1,.4)
}
table(res)
2/70
shiny::runApp('ByScientist/SumonaSarkar/AppV1')
shiny::getOption("shiny.port")
shiny::getShinyOption("shiny.port")
reticulate::repl_python()
for i in range(5):
print(i)
for i in range(5):
print(i)
no
shiny::runApp('ByScientist/EnricoLucon/CharpyClone/charpyapp')
install.packages("xkcd")
shiny::runApp('ByScientist/AntonioPossolo/CODES/CODES/decisiontree')
setwd("~/MiscCode/compute_timesheet")
source("compute_timesheet.R")
# David Placeholder
compute_hours(labor_allocations=c(.85,.1,.05),
names=c("SED Planning and Administration",
"SED Labor",
"ML for TCSD"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
# David Placeholder
compute_hours(labor_allocations=c(.9,.1),
names=c("SED Planning and Administration",
"SED Labor"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
source("compute_timesheet.R")
# David Placeholder
compute_hours(labor_allocations=c(.9,.1),
names=c("SED Planning and Administration",
"SED Labor"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
compute_hours(labor_allocations=c(.9,.1),
#names=c("SED Planning and Administration",
#        "SED Labor"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
source("compute_timesheet.R")
# David Placeholder
compute_hours(labor_allocations=c(.9,.1),
#names=c("SED Planning and Administration",
#        "SED Labor"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
leave
out_mat
out_mat
allocationNames
# David Placeholder
compute_hours(labor_allocations=c(.9,.1),
#names=c("SED Planning and Administration",
#        "SED Labor"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
# David Placeholder
compute_hours(labor_allocations=c(.9,.1),
#names=c("SED Planning and Administration",
#        "SED Labor"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
setwd("~/MiscCode/compute_timesheet")
source("compute_timesheet.R")
# David Placeholder
compute_hours(labor_allocations=c(.9,.1),
#names=c("SED Planning and Administration",
#        "SED Labor"),
annualLeave=c(0,0,0,0,0,0,0,0,0,8),
sickLeave=c(0,0,0,0,0,0,0,0,0,0),
adminLeave=c(0,0,0,0,0,0,0,0,0,0),
paidHolidayTimeOff=c(0,0,0,0,0,0,0,0,0,0),
telework=c( c(1,0,1,1,0), c(1,0,1,1,0)),
telereg=c("Mon","Wed","Th"),
trim=T)
shiny::runApp('~/ByScientist/SumonaSarkar/AppV1')
runApp('~/ByScientist/SumonaSarkar/AppV1')
runApp('~/ByScientist/SumonaSarkar/AppV1')
runApp('~/ByScientist/SumonaSarkar/AppV1')
😁
print(😐)
print('😐')
rep("🦄",100)
rep("🦄",10)
rep("🦄",10)
?next
ggplot(NA)
runApp('~/ByScientist/SumonaSarkar/AppV1')
runApp('~/ByScientist/SumonaSarkar/AppV1')
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
options(dplyr.summarise.inform = FALSE)
source('R/utils.R')
source('R/plot_utils.R')
setwd("~/ByScientist/SumonaSarkar/AppV1")
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
options(dplyr.summarise.inform = FALSE)
source('R/utils.R')
source('R/plot_utils.R')
source('R/run_comet.R')
filepath = '~/Downloads/Diane_Nelson_COMET_remove_lowest.csv'
data = read.csv(filepath)
filepath = '~/../Downloads/Diane_Nelson_COMET_remove_lowest.csv'
data = read.csv(filepath)
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 123,
var_func = 1,
smooth_df = 0, # -> default smoothing
perf_metrics = c(7,8,9,10),
conf_lev = .95)
pi_plot(comet_results)
db_res = discrimination_bands_plot(comet_results)
db_res[[1]]
db_res[[2]]
source('R/plot_utils.R')
db_res = discrimination_bands_plot(comet_results)
is_increasing(sub_preds$upr)
plot(sub_preds$upr)
db_res = discrimination_bands_plot(comet_results)
db_res = discrimination_bands_plot(comet_results)
source('R/utils.R')
source('R/plot_utils.R')
db_res = discrimination_bands_plot(comet_results)
db_res[[1]]
db_res[[2]]
db_res[[3]]
shiny::runApp()
runApp()
runApp()
runApp()
?interactive
?show_progress
runApp()
runApp()
runApp()
filepath = '~/../Downloads/Diane_Nelson_COMET_remove_lowest.csv'
data = read.csv(filepath)
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 123,
var_func = 1,
smooth_df = 0, # -> default smoothing
perf_metrics = c(7,8,9,10),
conf_lev = .95)
source('R/utils.R')
source('R/plot_utils.R')
source('R/run_comet.R')
filepath = '~/../Downloads/Diane_Nelson_COMET_remove_lowest.csv'
data = read.csv(filepath)
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 123,
var_func = 1,
smooth_df = 0, # -> default smoothing
perf_metrics = c(7,8,9,10),
conf_lev = .95)
source('R/utils.R')
source('R/plot_utils.R')
source('R/run_comet.R')
filepath = '~/../Downloads/Diane_Nelson_COMET_remove_lowest.csv'
data = read.csv(filepath)
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 123,
var_func = 1,
smooth_df = 0, # -> default smoothing
perf_metrics = c(7,8,9,10),
conf_lev = .95)
source('R/utils.R')
source('R/plot_utils.R')
source('R/run_comet.R')
filepath = '~/../Downloads/Diane_Nelson_COMET_remove_lowest.csv'
data = read.csv(filepath)
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 123,
var_func = 1,
smooth_df = 0, # -> default smoothing
perf_metrics = c(7,8,9,10),
conf_lev = .95)
db_res = discrimination_bands_plot(comet_results)
pi_plot(comet_results)
setwd("C:/Users/dtn1/Documents/ByScientist/SumonaSarkar/AppV1/testing")
library(ggplot2)
list.files()
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
options(dplyr.summarise.inform = FALSE)
setwd("C:/Users/dtn1/Documents/ByScientist/SumonaSarkar/AppV1")
source('R/utils.R')
source('R/plot_utils.R')
source('R/run_comet.R')
filepaths = c('Full_Template_Example_1_COMET.csv',
'Full_Template_Example_2_COMET.csv',
'Full_Template_Example_3_COMET.csv')
for(ii in 1:length(file_paths)) {
data = read.csv(filepaths[ii])
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 1234,
var_func = 1, # variance proportional to mean
smooth_df = 0, # default smoothing
perf_metrics = c(7,8,9,10,11,12),
conf_lev = .95)
print(raw_data_plot(metrics))
print(means_plot(metrics))
print(means_barplot(metrics))
print(prop_const_plot(metrics) )
print(residual_plot(metrics) )
print(cv_barplot(metrics) )
print(pi_plot(metrics) )
print(r2_plot(metrics) )
print(empirical_cdf_plot(metrics) )
print(viability_resids_hist_plot(metrics) )
print(viability_hist_plot(metrics) )
print(via_over_time_plot(metrics) )
print(pipette_error_plot(metrics))
print(experimental_integrity_plot(metrics) )
db_res = discrimination_bands_plot(metrics)
print(db_res[[1]])
print(db_res[[2]])
print(db_res[[3]])
}
filepaths = c('Full_Template_Example_1_COMET.csv',
'Full_Template_Example_2_COMET.csv',
'Full_Template_Example_3_COMET.csv')
for(ii in 1:length(filepaths)) {
data = read.csv(filepaths[ii])
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 1234,
var_func = 1, # variance proportional to mean
smooth_df = 0, # default smoothing
perf_metrics = c(7,8,9,10,11,12),
conf_lev = .95)
print(raw_data_plot(metrics))
print(means_plot(metrics))
print(means_barplot(metrics))
print(prop_const_plot(metrics) )
print(residual_plot(metrics) )
print(cv_barplot(metrics) )
print(pi_plot(metrics) )
print(r2_plot(metrics) )
print(empirical_cdf_plot(metrics) )
print(viability_resids_hist_plot(metrics) )
print(viability_hist_plot(metrics) )
print(via_over_time_plot(metrics) )
print(pipette_error_plot(metrics))
print(experimental_integrity_plot(metrics) )
db_res = discrimination_bands_plot(metrics)
print(db_res[[1]])
print(db_res[[2]])
print(db_res[[3]])
}
filepaths = c('other/Full_Template_Example_1_COMET.csv',
'other/Full_Template_Example_2_COMET.csv',
'other/Full_Template_Example_3_COMET.csv')
for(ii in 1:length(filepaths)) {
data = read.csv(filepaths[ii])
comet_results = run_comet(dataset=data,
n_boot = 50,
seed = 1234,
var_func = 1, # variance proportional to mean
smooth_df = 0, # default smoothing
perf_metrics = c(7,8,9,10,11,12),
conf_lev = .95)
print(raw_data_plot(metrics))
print(means_plot(metrics))
print(means_barplot(metrics))
print(prop_const_plot(metrics) )
print(residual_plot(metrics) )
print(cv_barplot(metrics) )
print(pi_plot(metrics) )
print(r2_plot(metrics) )
print(empirical_cdf_plot(metrics) )
print(viability_resids_hist_plot(metrics) )
print(viability_hist_plot(metrics) )
print(via_over_time_plot(metrics) )
print(pipette_error_plot(metrics))
print(experimental_integrity_plot(metrics) )
db_res = discrimination_bands_plot(metrics)
print(db_res[[1]])
print(db_res[[2]])
print(db_res[[3]])
}
for(ii in 1:length(filepaths)) {
data = read.csv(filepaths[ii])
metrics = run_comet(dataset=data,
n_boot = 50,
seed = 1234,
var_func = 1, # variance proportional to mean
smooth_df = 0, # default smoothing
perf_metrics = c(7,8,9,10,11,12),
conf_lev = .95)
print(raw_data_plot(metrics))
print(means_plot(metrics))
print(means_barplot(metrics))
print(prop_const_plot(metrics) )
print(residual_plot(metrics) )
print(cv_barplot(metrics) )
print(pi_plot(metrics) )
print(r2_plot(metrics) )
print(empirical_cdf_plot(metrics) )
print(viability_resids_hist_plot(metrics) )
print(viability_hist_plot(metrics) )
print(via_over_time_plot(metrics) )
print(pipette_error_plot(metrics))
print(experimental_integrity_plot(metrics) )
db_res = discrimination_bands_plot(metrics)
print(db_res[[1]])
print(db_res[[2]])
print(db_res[[3]])
}
warnings()
shiny::runApp()
runApp()
