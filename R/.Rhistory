res
cumsum(res)
resolution = 10
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point()
res = rmultinom(1,10,prob=rep(.1,10))
cumsum(res)
res
cumsum(res)
full_grid$res = c(0,res)
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point() +
geom_line(aes(y=res))
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point() +
geom_line(aes(y=res))
generate_cdf = function(resolution) {
resolution = 10
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,10,prob=rep(.1,10))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point() +
geom_line(aes(y=res))
}
generate_cdf(10)
generate_cdf(10)
generate_cdf(10)
generate_cdf(10)
generate_cdf(10)
generate_cdf(50)
generate_cdf(50)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,10,prob=rep(.1,10))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point() +
geom_line(aes(y=res))
}
generate_cdf(50)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point() +
geom_line(aes(y=res))
}
generate_cdf(50)
generate_cdf(50)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
}
generate_cdf(50)
generate_cdf(50)
generate_cdf(50)
generate_cdf(50)
generate_cdf(50)
generate_cdf(50)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
}
generate_cdf(20)
generate_cdf(20)
generate_cdf(20)
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
}
generate_cdf(20)
generate_cdf(20)
generate_cdf(20)
generate_cdf(20)
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
}
for(ii in 1:100) {
generate_cdf(20)
Sys.sleep(1)
}
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
}
for(ii in 1:100) {
ggplot(generate_cdf(20))
Sys.sleep(1)
}
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
ggplot(generate_cdf(20))
Sys.sleep(1)
}
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(1)
}
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
cumsum(res)
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
?prob
?rmultinom
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(1,resolution),resolution))
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
library(ggplot2)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(1,resolution),resolution)
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(1,resolution),resolution)
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
dev.new()
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(.1,resolution))
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
# be sure to have 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
library(ggplot2)
# Consider an N x N grid on which we want to draw a random (discrete) cdf.
# From point i to i+1, the cdf function can stay flat, or 'jump' all
# the way up to the top of the grid. Each cdf of this form can be represented
# by a length N vector 'x' that lives on the simplex sum(x) == N.
# Thus each possible x vector represents a cdf. We can then draw random
# cdfs by taking draws from a multinomial distribution where there are
# N groups with equal probability.
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
# be sure to have 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
install.packages("MCMCpack")
library(MCMCpack)
?rdirichlet
rdirichlet(4,rep(1,4))
rdirichlet(1,rep(1,4))
rdirichlet(1,rep(1,10))
rdirichlet(1,rep(5,10))
rdirichlet(1,rep(1,10))
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rdirichlet(1,resolution,rep(1,resolution))
#res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
resolution=10
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rdirichlet(1,resolution,rep(1,resolution))
res = rdirichlet(1,rep(1,resolution))
res
cumsum(res)
full_grid$res = c(0,cumsum(res))*resolution
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
p
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rdirichlet(1,rep(1,resolution))
#res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))*resolution
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
# be sure to have the 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
library(ggplot2)
library(MCMCpack)
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rdirichlet(1,rep(1,resolution))
#res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))*resolution
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
# be sure to have the 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
# be sure to have the 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
dirichlet_resolution = 100
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rdirichlet(1,rep(1,dirichlet_resolution))
#res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))*resolution
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
# be sure to have the 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rdirichlet(1,rep(1,dirichlet))
#res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))*resolution
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
# be sure to have the 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
generate_cdf = function(resolution) {
grid_x = seq(0,resolution)
grid_y = seq(0,resolution)
full_grid = as.data.frame(expand.grid(grid_x,grid_y))
res = rdirichlet(1,rep(1,resolution))
#res = rmultinom(1,resolution,prob=rep(1,resolution))
full_grid$res = c(0,cumsum(res))*resolution
p = ggplot(full_grid, aes(x=Var1,y=Var2)) + geom_point(size=.1) +
geom_line(aes(y=res))
return(p)
}
# be sure to have the 'Plots' window open on the right
for(ii in 1:100) {
print(generate_cdf(20))
Sys.sleep(.5)
}
rdirichlet(1,rep(1,20))
shiny::renderPlot
?shiny::renderPlot
shiny::runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
install.packages(c("BiocManager", "boot", "broom", "cachem", "callr", "cli", "cpp11", "data.table", "dbplyr", "deldir", "desc", "DescTools", "diffobj", "dplyr", "e1071", "farver", "gmm", "Hmisc", "isoband", "kableExtra", "labelled", "lifecycle", "lubridate", "mathjaxr", "MatrixModels", "mime", "NSM3", "packrat", "partitions", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rbibutils", "RcppArmadillo", "RcppParallel", "Rdpack", "reprex", "rmarkdown", "rms", "rsconnect", "RSQLite", "Rsymphony", "rvest", "sfsmisc", "spatstat", "spatstat.data", "spatstat.utils", "styler", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "WGCNA", "xfun", "zoo"))
install.packages(c("BiocManager", "boot", "broom", "cachem", "callr", "cli", "cpp11", "data.table", "dbplyr", "deldir", "desc", "DescTools", "diffobj", "dplyr", "e1071", "farver", "gmm", "Hmisc", "isoband", "kableExtra", "labelled", "lifecycle", "lubridate", "mathjaxr", "MatrixModels", "mime", "NSM3", "packrat", "partitions", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rbibutils", "RcppArmadillo", "RcppParallel", "Rdpack", "reprex", "rmarkdown", "rms", "rsconnect", "RSQLite", "Rsymphony", "rvest", "sfsmisc", "spatstat", "spatstat.data", "spatstat.utils", "styler", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "WGCNA", "xfun", "zoo"))
install.packages(c("BiocManager", "boot", "broom", "cachem", "callr", "cli", "cpp11", "data.table", "dbplyr", "deldir", "desc", "DescTools", "diffobj", "dplyr", "e1071", "farver", "gmm", "Hmisc", "isoband", "kableExtra", "labelled", "lifecycle", "lubridate", "mathjaxr", "MatrixModels", "mime", "NSM3", "packrat", "partitions", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rbibutils", "RcppArmadillo", "RcppParallel", "Rdpack", "reprex", "rmarkdown", "rms", "rsconnect", "RSQLite", "Rsymphony", "rvest", "sfsmisc", "spatstat", "spatstat.data", "spatstat.utils", "styler", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "WGCNA", "xfun", "zoo"))
shiny::runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
?shiny::fileInput
?fileInput
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
shiny::runApp('CellCounting/AppV1')
library(installr)
updateR()
shiny::runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('CellCounting/AppV1')
runApp('Charpy/CharpyClone/charpyapp/CharpyApp')
setwd("~/CellCounting/AppV1")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp('~/Charpy/CharpyClone/charpyapp/CharpyApp')
runApp()
shiny::runApp()
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
setwd("~/CellCounting/AppV1/R")
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
?selectInput
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
runApp('~/CellCounting/AppV1')
